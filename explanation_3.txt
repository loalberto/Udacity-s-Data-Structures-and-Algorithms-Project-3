Rearrange Array Digits:
I figured out that in order to get the biggest numbers in a list, we had to sort the values from ascending order. The method that I used is not the fastest but it preserves the worst-time complexity of O(nlogn) because merge sort has to split the array up to n number of times and piece them back together logn number of times. This gives merge sort a worst-time complexity of O(nlogn) and a space complexity of O(n), where n represents the number of elements in the list. It has this space complexity because for each element it uses auxiliary storage, the creation of an array, to be able to store it. Although fast, it is expensive for memory. Counting sort, would be a faster and better option assuming the numbers remain whole numbers or at a finite precision for decimal numbers. Now that I have the list sorted, I traverse through the list and attach the value to the first_number if it's an even index or attach it to the second_number if it's an odd index. This will have an overall time complexity of O(n). And so, the overall time complexity is O(nlogn).