Autocomplete Tries:
For the TrieNode, I initilized it with the node's character, children and a code to represent whether its the end of a word. For the insert function, I take the character and create a new node for it and store it in the current node's children list. The way I chose to implement the suffix method was with the use of recursion. I recursed through each of the node's children with a suffix_helper method to be able to return a list of all the characters below it. Then I returned the list of all suffixes. 
For the Trie itself, I initialized it with a root node. Then took a word as input so that I can then split it into an array of TrieNodes. For the last node in the list I changed its code to 1 to know when we reached the end of a word. Then for each node I inserted it to my insert_helper to check whether the node is already in the branch and if its not then add it to the current node's children. If it already exists then I pass that node into the recursice function and continue to traverse tree for an open spot for the next child. The find method in this class was created with checking whether the first character of the word is one of the children of the root. If it isn't then finding this prefix is impossible. Else, run a DFS to be able to check every single child to find the last node that has the last character. If in any of these traversals the character does not match a node then return None. The expected time complexity for a TrieNode's insert should be O(1) since we are simply adding it to the node's list of children. For suffixes, the worst case can get as bad as O(n * m), where n represents the number of nodes and m represents the size of the word, since it may need to traverse through every node to find a matching combination. For a Trie, the worst-case to insert can be O(n), since it may have to check every element to be able to insert it in the tree. For find, it can also have a worst-case of O(n), since it may need to check every single element until it finds the last element. The space complexity for a TrieNode's traversals depends on the number of words, n, and also depends on the number of characters in each word, m. So, their space complexity is O(n*m).