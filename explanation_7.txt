Request Routing: 
The approach was similar to that of the Trie data structure. It differ by storing words in each node as opposed to storing only characters. I split each word by the '/' and stored it into the node. Each node also had a handler instance valriable that was used to store handler information. So, when I wanted to add a handler to a directory I would pass the path to my Trie.find function so that I can get the designated node. Then I set its handler to the handler information. Similarly, for the lookup operation I called my find function to be able to look up a path and return the last node or none if it did not exist. The space and time complexities were the same Trie Data Struture. The time complexity for lookup and add handler would depend on the number of words in the path, denoted by p. So, adding a handler would take a time complexity of O(d * p), where p is the number of exisiting paths, since we'd have to traverse every path until we found our desired node. 