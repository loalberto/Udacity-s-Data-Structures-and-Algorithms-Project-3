Rotated Array: 
For this problem I used binary search to first help me find the point in which the original sorted array is. In other words, I look for the index of the smallest number in this list, a pivot. This found when the number is between two numbers that are bigger than it. Once this pivot is found, I use it to help me know where to begin or end my next binary search for the inputed value. Since, I am only using binary search for both the finding of the pivot and to find the element, then I am able to preserve the worst-case of O(logn). I decided to do it this way because binary search preserves logn and so in order to have everything run in logn then I needed to make sure that finding all values should utilize binary search. The overall space complexity remains at O(n since we need to store all elements in a list. This is greater than the depth of the recursive tree. 