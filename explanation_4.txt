Dutch National Flag:
I a single traversal I was able to swap the elements around until I got all the 0's on the left, the 1's in the middle, and the 2's at the end. I kept track of a head and tail, where the head represented the beginning of the list and everything before it was already in the correct spot and the tail represented the end of the list and everything after it was already in the correct spot. When I traversed and encounted a 0, I would swap the values with the current value and the head and then check if this newely swapped current was in the correct spot. The amount of times current would check was 3 times for 3 numbers. When I got a 1, I would leave it in it's place because I assumed it's already in the correct spot. When I found a 2, I would do the same thing as I did for 1 but would swap with the tail instead. I did this until the head and tail were next to eachother or if current got to the end. The time-complexity for this was 3 * n, where n is the number of elements in the list. Giving me a worst-case of O(n). The space complexity is O(n) because of the input list. We need to store the list that contains n number of elements.